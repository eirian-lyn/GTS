Tên   : Trần Quốc Bảo
MSSV  : 1951120086
Lớp NC: CN19B
Lớp HP: 010112400102_KyThuatLapTrinh

Mục Lục: "//Chương x - bài yy"

//Chương 4 - bài 01:
/*
Bài 1. Hãy khai báo bien kí tu ch và con tro kieu kí tu pc tro vào bien ch. Viet ra các cách gán giá tri ‘A’ cho bien ch. 
*/

#include <iostream>
using namespace std;
int main(){
	
	char ch; //khai bao bien kitu
	char *pc; //khai bao con tro ki tu
	pc = &ch; //tro con tro pc vào bién ch
	
	ch = 'A'; //Cách 1
	*pc='A'; //Cách 2
	ch = 65; //Cách 3	
	*pc=65; //Cách 4
	ch = 1000001; //Cách 5
	*pc = 1000001; //Cách 6
	ch = 0x41; //Cách 7
	*pc = 0x41; //Cách 8

	//còn hê co sô 8 và 10 nua, ma em ko biet ghi :(
	
	cout<<ch; //test
	
	return 0;
}


//Chương 4 - bài 02:
/*
Bài 2. Su dung con tro nhap mot dãy so nguyên gom n phan tu.
a, Xuat dãy ra màn hình theo chieu nguoc lai
b, Xác dinh phan tu có giá tri lon nhat và vi trí cua nó
c, Sap xep dãy tang dan
d, Sap xep mang nhu sau: bên trái là các phan tu âm giam dan, o giua là so không ( neu có), bên phai là các so duong tang dan
*/

#include <iostream>
using namespace std;

void nhapMang(int *p, int n);
void xuatMang(int *p, int n);
void xuatNguoc(int *p, int n);
void viTri(int *p, int n, int k);
int maxB(int *p, int n);
void sapXepTang(int *p, int n);
void sapXep2(int *p, int n);

int main(){
	
	int n,*p;
	cout<<"Nhap so ptu: ";
	cin>>n;
	p = new int[n];
	nhapMang(p,n);
	
	cout<<"\ncA. Mang xuat nguoc:\n"; xuatNguoc(p,n);
	cout<<"\ncB. Gia tri lon nhat la: "<<maxB(p,n)<<"; tai vi tri: "; viTri(p,n,maxB(p,n));
	cout<<"\ncC. Xuat mang tang:\n"; sapXepTang(p,n);
	cout<<"\ncC. Xuat mang AmGiam conlaiTang:\n"; sapXep2(p,n);
	
	delete[] p;
	return 0;
}

void nhapMang(int *p, int n){
	for(int *i=p; i<p+n; i++ ){
		cout<<"nhap phan tu "<<i-p+1<<" : ";
		cin>>*i;
	}
}
void xuatMang(int *p, int n){
	for(int *i=p; i<p+n; i++ ){
		cout<<*i<<'\t';
	}
}
void xuatNguoc(int *p, int n){
	for(int *i=p+n-1; i>=p; i-- ){
		cout<<*i<<'\t';
	}
	cout<<endl;
}
void viTri(int *p, int n, int k){
	for(int *i=p; i<p+n; i++ ){
		if(*i==k) cout<<i-p+1<<", ";
	}
	cout<<endl;
}
int maxB(int *p, int n){
	int max=*p;
	for(int *i=p; i<p+n; i++ ){
		if(*i>max) max=*i;
	}
	return max;
}
void sapXepTang(int *p, int n){
	int tam;
	for(int *i=p; i<p+n-1; i++){
		for(int *j=i+1; j<p+n; j++){
			if(*i>*j){
				tam=*i;
				*i=*j;
				*j=tam;
			}
		}
	}
	xuatMang(p,n);
	cout<<endl;
}
void sapXep2(int *p, int n){
	int vt0=0;
	sapXepTang(p,n);
	while(*(p+vt0)<0) vt0++;
	int tam;
	for(int *i=p; i<p+vt0-1; i++){
		for(int *j=i+1; j<p+vt0; j++){
			if(*i<*j){
				tam=*i;
				*i=*j;
				*j=tam;
			}
		}
	}
	xuatMang(p,n);
	cout<<endl;
}

//Chương 4 - bài 03:
/*
Bài 3. Cho xâu kí tu (dung con tro) s. 
a, Hãy copy tu s sang xâu t mot doan bat dau tai vi trí m voi do dài n.
b, Ðoi các kí tu (neu là chu cái) dau tiên sau các khoang trang cua t sang chu in hoa.
*/

#include <iostream>
#include <cstring>
using namespace std;
void copyAtoB(char *s, char *t, int m, int n){
	int k=0;
	for(int i=0; i<n; i++){
		*(t+i)=*(s+m+i-1);
	}
	*(t+n)='\0';
}
void strH(char *s){
	int i=0;
	while(*(s+i)!='\0'){
		if( (*(s+i)>='a' && *(s+i)<='z') && *(s+i-1)==' '){
			*(s+i)-=32;
		}
		i++;
	}
}
int main(){
	char S[277];
	cout<<"Cho xau S: \n";
	cin.getline(S,276);
	char *s = S;//"tran 7thao quoc 2giang bao dep trai ll";
	//cout<<"Cho xau S: "<<s<<endl;
	
	//Cau A
	int m, n;
	cout<<"\nNhap m, n: ";
	cin>>m>>n;
	char *t;
	t = new char[n];
	copyAtoB(s,t,m,n);
	cout<<"cA. Xau t: \n"<<t<<endl;
	delete[] t;
	
	//Cau B
	strH(s);
	cout<<"\ncB. Chuoi da Viet Hoa sau Khoang Trang:\n"<<s<<endl;
	
	return 0;
}

//Chương 4 - bài 04:

//Xay dung cau truc DSLK don

#include <iostream>
using namespace std;

// 1. Khai báo cau truc du lieu so nguyen
struct NODE{
	int Data;
	struct NODE *pNext;
};

struct LIST{
	NODE *pHead;
	NODE *pTail;
};

// 2. Khoi tao dslkd
void init(LIST &l){
	l.pHead = l.pTail = NULL;
}

// 3. Tao NODE trong danh sách
NODE *getNode(int x){
	NODE *p = new NODE;
	
	if(p == NULL){
		return NULL;
	} else{
		p->Data = x;
		p->pNext = NULL;
	}	
	return p;
}

// 4. Add node (dau/cuoi/tuychon)

//Them node p vào dàu list
void addHead(LIST &l, NODE *p){
	if(l.pHead == NULL){ //neu list rõng
		l.pHead = l.pTail = p;
	} else{
		p->pNext = l.pHead; // p dua lk cho head
		l.pHead = p; // p tro thanh head
	}
}
//Them node p vào cuoi list
void addTail(LIST &l, NODE *p){
	if(l.pHead == NULL){ //neu list rõng
		l.pHead = l.pTail = p;
	} else{
		l.pTail->pNext = p; // pTail dua lk cho p
		l.pTail = p; // p tro thanh tail
	}
}

// 5. Nhap /xuat du lieu cho list
void inputList(LIST &l){
	int n;
	cout<<"Nhap muon nhap So Node = ";
	cin>>n;
	init(l);
	for(int i=1; i<=n; i++){
		int x;
		cout<<"Nhap du lieu = ";
		cin>>x;
		NODE *p = getNode(x); // dua data vao con tro node p
	//	addHead(l,p); // Them dau : 54321
		addTail(l,p); // Them cuói : 12345
	}
}

void outputList(LIST &l){
	cout<<endl;
	for(NODE *p = l.pHead; p != NULL; p = p->pNext){   //p != NULL <=> p
		cout<<p->Data<<'\t';
	}
	cout<<endl;
}

// 6. Xu ly blabla

// Hoan Vi
void hoanVi(int &a, int &b){
	int tam;
	tam = a;
	a = b;
	b = tam;
}
// sap xep Tang
void sortUp(LIST &l){
	for(NODE *p = l.pHead; p != l.pTail; p = p->pNext){
		for(NODE *q = p->pNext; q != NULL; q = q->pNext){
			if(p->Data > q->Data){
				hoanVi(p->Data,q->Data);
			}
		}
	}
}
// sap xep Giam
void sortDown(LIST &l){
	for(NODE *p = l.pHead; p != l.pTail; p = p->pNext){
		for(NODE *q = p->pNext; q != NULL; q = q->pNext){
			if(p->Data < q->Data){
				hoanVi(p->Data,q->Data);
			}
		}
	}
}

// dem so phan tu trong list
int len(LIST l){
	int k=0;
	for(NODE *p = l.pHead; p != NULL; p = p->pNext){
		k++;
	}
	return k;
}

// Them node p vào vi tri q
void addNodeTok(LIST &l, NODE *q, int k){
	if(k==0){
		addHead(l,q);
		return; //ket thuc
	}
	int i=0;
	for(NODE *p = l.pHead; p != NULL; p = p->pNext){
		i++;
		if(i+1 == k){
			NODE *t = p->pNext;
			p->pNext = q;
			q->pNext = t;
			return; //ket thuc
		}
	}
}

//Xóa node p dàu list
void deleteHead(LIST &l){
	NODE *t = l.pHead;
	l.pHead = l.pHead->pNext;
	delete t;
}
//Xóa node p cuói list
void deleteTail(LIST &l){
	if(len(l)==1){
		l.pHead=l.pTail=NULL;
		return;
	}
	NODE *g = l.pHead;
	NODE *t = l.pTail;
	while(g->pNext != l.pTail){
		g = g->pNext;
	}
	//if(g->pNext == l.pTail) cout<<"Bao dep trai";
	l.pTail = g;
	l.pTail->pNext = NULL;
	delete t;
}
//Xóa node p tai vitri k cua list
void deleteTail(LIST &l, int k){
	
}

// 7. Giai Phong
void giaiPhong(LIST &l){
	NODE *p;
	while (l.pHead != NULL){
		p = l.pHead;
		l.pHead = l.pHead->pNext;
		delete p;
	}
}

int main(){
	LIST l;
	cout<<"NHAP DS";
	inputList(l);
	cout<<"\nXUAT DS";
	outputList(l);
	
	int Q, k;
	cout<<"\nNhap Q muon them: ";
	cin>>Q;
	NODE *q= getNode(Q);
	cout<<"Nhap vi tri k muon them: ";
	cin>>k;
	cout<<"DS sau khi them:";
	addNodeTok(l,q,k);
	outputList(l);
	
	cout<<"\nDS sau khi xoa dau:";
	deleteHead(l);
	outputList(l);
	cout<<"\nDS sau khi xoa cuoi:";
	deleteTail(l);
	outputList(l);
	
	cout<<"\nDS sau sap xep Tang:";
	sortUp(l);
	outputList(l);
	
	cout<<"\nDS sau sap xep Giam:";
	sortDown(l);
	outputList(l);
	
	cout<<"\nSo phan tu hien tai trong List la: "<<len(l)<<endl;
	
	giaiPhong(l);
	return 0;
}
